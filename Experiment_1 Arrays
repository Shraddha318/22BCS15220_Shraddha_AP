package EX1;
// Q1-Remove Duplicates from Sorted Array
// https://leetcode.com/problems/remove-duplicates-from-sorted-array/

class Solution {
    public int removeDuplicates(int[] nums) {
        if(nums.length==0) return 0;
        int j=0;
        for(int i=0;i<nums.length;i++){
            if(i==nums.length-1 || nums[i]!=nums[i+1]){
                nums[j]=nums[i];
                j++;
            }
        }
        return j;
    }
}

// Q2-Insertion Sort
//https://www.geeksforgeeks.org/problems/insertion-sort/1

class Solution {
    // Please change the array in-place
    public void insertionSort(int arr[]) {
        // code here
        for (int i = 0; i<=arr.length-1; i++){
            int j = i;
            while(j >0 && arr[j-1] > arr[j] ){
                int temp = arr[j-1];
                arr[j-1] = arr[j];
                arr[j] = temp;
                j--;
            }
        }
    }
}
//Q3-Contains Duplicate
//https://leetcode.com/problems/contains-duplicate/description/
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i=1;i<nums.length;i++){
            if(nums[i-1]==nums[i]){
                return true;
            }
        }
        return false;
    }
}

//Q4-Two Sum
//https://leetcode.com/problems/two-sum/description/
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n=nums.length;
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]+nums[j]==target){
                    return new int[]{i,j};
                }
            }
        }
        return new int[]{-1,-1};
    }
}

//Q5-Majority Element
//https://leetcode.com/problems/majority-element/description/

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        return nums[n/2];
    }
}

//Q6-Valid Palindrome
//https://leetcode.com/problems/valid-palindrome/description/
class Solution {
    public boolean isPalindrome(String s) {
        s = s.toLowerCase();
        int start = 0;
        int end = s.length() - 1;

        while (start <= end) {
            // Skip non-alphanumeric characters
            while (start < end && !Character.isLetterOrDigit(s.charAt(start))) {
                start++;
            }
            while (start < end && !Character.isLetterOrDigit(s.charAt(end))) {
                end--;
            }

            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}

//Q7-3 Sum
//https://leetcode.com/problems/3sum/description/

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        int n = nums.length;

        for (int i = 0; i < n - 2; i++) {
            // Skip duplicates for the first element
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            int start = i + 1;
            int end = n - 1;

            while (start < end) {
                int sum = nums[i] + nums[start] + nums[end];

                if (sum == 0) {
                    result.add(Arrays.asList(nums[i], nums[start], nums[end]));

                    // Skip duplicates for the second and third elements
                    while (start < end && nums[start] == nums[start + 1]) start++;
                    while (start < end && nums[end] == nums[end - 1]) end--;

                    start++;
                    end--;
                } else if (sum < 0) {
                    start++;
                } else {
                    end--;
                }
            }
        }
        return result;
    }
}

//Q8-Find the Duplicate Number
//https://leetcode.com/problems/find-the-duplicate-number/description/
class Solution {
    public int findDuplicate(int[] nums) {
        // Arrays.sort(nums);
        int n=nums.length;
        int j=0;
        while(j<n){
            if(nums[j]!=j+1){
                int correct=nums[j]-1;
                if(nums[j]!=nums[correct]){
                    swap(nums,j,correct);
                }
                else{
                    return nums[j];
                }
            }
            else{
                j++;
            }
        }
       /* for(int i=0;i<n-1;i++){
            if(nums[i]-1!=i){
                return nums[i];
            }
        }*/
        return -1;
    }
    public static void swap(int[] nums,int i,int j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}
//Q9- Longest Substring Without Repeating Characters
//https://leetcode.com/problems/longest-substring-without-repeating-characters/description/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        if (n == 0) {
            return 0;
        }

        int l = 0;
        int start = 0;
        int[] lastIndex = new int[256]; // Assuming ASCII character set

        for (int i = 0; i < 256; i++) {
            lastIndex[i] = -1; // Initialize all elements to -1
        }

        for (int end = 0; end < n; end++) {
            char currentChar = s.charAt(end);
            if (lastIndex[currentChar] >= start) {
                start = lastIndex[currentChar] + 1;
            }
            lastIndex[currentChar] = end;
            l = Math.max(l, end - start + 1);
        }

        return l;
}

//Q10-Set Matrix zeroes
//https://leetcode.com/problems/set-matrix-zeroes/
 public static void setZeroes(int[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        boolean firstRowZero = false, firstColZero = false;

        for (int i = 0; i < m; i++) {
            if (matrix[i][0] == 0) firstColZero = true;
        }
        for (int j = 0; j < n; j++) {
            if (matrix[0][j] == 0) firstRowZero = true;
        }

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][j] == 0) {
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
            }
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;
                }
            }
        }

        if (firstColZero) {
            for (int i = 0; i < m; i++) {
                matrix[i][0] = 0;
            }
        }

        if (firstRowZero) {
            for (int j = 0; j < n; j++) {
                matrix[0][j] = 0;
            }
        }
    }
}

//Q11-Jump Game 
//https://leetcode.com/problems/jump-game/
  public static int jump(int[] nums) {
        int n = nums.length;
        if (n == 1) return 0;

        int jumps = 0;
        int currentEnd = 0;
        int farthest = 0;

        for (int i = 0; i < n - 1; i++) {
            farthest = Math.max(farthest, i + nums[i]);
            if (i == currentEnd) {
                jumps++;
                currentEnd = farthest;
                if (currentEnd >= n - 1) break;
            }
        }
        return jumps;
    }



