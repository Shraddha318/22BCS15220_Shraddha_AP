// Q1: Reverse Linked List
// LeetCode 206: https://leetcode.com/problems/reverse-linked-list/
public ListNode reverseList(ListNode head) {
    ListNode prev = null;
    ListNode current = head;
    ListNode next = null;

    while (current != null) {
        next = current.next;
        current.next = prev;
        prev = current;
        current = next;
    }

    head = prev;
    return head;
}

// Q2: Delete the Middle Node of a Linked List
// LeetCode 2095: https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/
public ListNode deleteMiddle(ListNode head) {
    if (head == null || head.next == null) {
        return null;
    }

    ListNode slow = head, fast = head;
    ListNode prev = null;

    while (fast != null && fast.next != null) {
        fast = fast.next.next;
        prev = slow;
        slow = slow.next;
    }

    prev.next = slow.next;

    return head;
}

// Q3: Merge Two Sorted Lists
// LeetCode 21: https://leetcode.com/problems/merge-two-sorted-lists/
public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
    if (list1 == null) return list2;
    if (list2 == null) return list1;

    ListNode dummy = new ListNode(0);
    ListNode current = dummy;

    while (list1 != null && list2 != null) {
        if (list1.val < list2.val) {
            current.next = list1;
            list1 = list1.next;
        } else {
            current.next = list2;
            list2 = list2.next;
        }
        current = current.next;
    }

    if (list1 != null) current.next = list1;
    if (list2 != null) current.next = list2;

    return dummy.next;
}

// Q4: Remove Duplicates from Sorted List II
// LeetCode 82: https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/
public ListNode deleteDuplicates(ListNode head) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    ListNode prev = dummy;

    while (head != null) {
        if (head.next != null && head.val == head.next.val) {
            while (head.next != null && head.val == head.next.val) {
                head = head.next;
            }
            prev.next = head.next;
        } else {
            prev = prev.next;
        }
        head = head.next;
    }

    return dummy.next;
}

// Q5: Linked List Cycle
// LeetCode 141: https://leetcode.com/problems/linked-list-cycle/
public boolean hasCycle(ListNode head) {
    if (head == null) return false;

    ListNode slow = head;
    ListNode fast = head;

    while (fast != null && fast.next != null) {
        slow = slow.next;
        fast = fast.next.next;

        if (slow == fast) {
            return true;
        }
    }

    return false;
}

// Q6: Reverse Linked List II
// LeetCode 92: https://leetcode.com/problems/reverse-linked-list-ii/
public ListNode reverseBetween(ListNode head, int left, int right) {
    if (head == null || left == right) return head;

    ListNode dummy = new ListNode(0);
    dummy.next = head;
    ListNode prev = dummy;

    for (int i = 0; i < left - 1; i++) {
        prev = prev.next;
    }

    ListNode curr = prev.next;
    ListNode next = curr.next;
    for (int i = 0; i < right - left; i++) {
        curr.next = next.next;
        next.next = prev.next;
        prev.next = next;
        next = curr.next;
    }

    return dummy.next;
}

// Q7: Rotate List
// LeetCode 61: https://leetcode.com/problems/rotate-list/
public ListNode rotateRight(ListNode head, int k) {
    if (head == null || head.next == null || k == 0) {
        return head;
    }

    ListNode current = head;
    int length = 1;
    while (current.next != null) {
        current = current.next;
        length++;
    }

    current.next = head;

    k = k % length;
    int stepsToNewHead = length - k;
    current = head;

    for (int i = 1; i < stepsToNewHead; i++) {
        current = current.next;
    }

    ListNode newHead = current.next;
    current.next = null;

    return newHead;
}

// Q8: Merge k Sorted Lists
// LeetCode 23: https://leetcode.com/problems/merge-k-sorted-lists/
public ListNode mergeKLists(ListNode[] lists) {
    PriorityQueue<ListNode> pq = new PriorityQueue<ListNode>(Comparator.comparingInt(a -> a.val));

    for (ListNode list : lists) {
        if (list != null) {
            pq.offer(list);
        }
    }

    ListNode dummy = new ListNode(0);
    ListNode current = dummy;

    while (!pq.isEmpty()) {
        ListNode node = pq.poll();
        current.next = node;
        current = current.next;

        if (node.next != null) {
            pq.offer(node.next);
        }
    }

    return dummy.next;
}

// Q9: Sort List
// LeetCode 148: https://leetcode.com/problems/sort-list/
public ListNode sortList(ListNode head) {
    if(head == null || head.next == null) {
        return head;
    }

    ListNode mid = get(head);
    ListNode right = mid.next;
    mid.next = null;

    ListNode left = sortList(head);
    right = sortList(right);

    return merge(left, right);
}

public ListNode merge(ListNode head1, ListNode head2) {
    ListNode dummy = new ListNode(-1);
    ListNode temp = dummy;

    while (head1 != null && head2 != null) {
        if (head1.val <= head2.val) {
            temp.next = head1;
            head1 = head1.next;
        } else {
            temp.next = head2;
            head2 = head2.next;
        }
        temp = temp.next;
    }

    temp.next = (head1 == null) ? head2 : head1;

    return dummy.next;
}

public ListNode get(ListNode head) {
    ListNode fast = head.next;
    ListNode slow = head;

    while (fast != null && fast.next != null) {
        slow = slow.next;
        fast = fast.next.next;
    }

    return slow;
}
